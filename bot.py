import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import re
import aiohttp  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π HTTP –∫–ª—ñ—î–Ω—Ç

TOKEN = "—Ç—É—Ç_—Ç–≤—ñ–π_—Ç–æ–∫–µ–Ω"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –Ω—ñ–∫–Ω–µ–π–º –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, —ñ —è —Å–ø—Ä–æ–±—É—é –∑–Ω–∞–π—Ç–∏ –º–∞–∫—Å–∏–º—É–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó üîç")

def is_phone_number(text):
    # –î–æ–ø—É—Å–∫–∞—î–º–æ + —ñ –≤—ñ–¥ 7 –¥–æ 15 —Ü–∏—Ñ—Ä
    return re.fullmatch(r'\+?\d{7,15}', text) is not None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()

    if is_phone_number(query):
        # –ü–æ—à—É–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É (–ø–æ–∫–∏ –∑–∞–≥–ª—É—à–∫–∞)
        await update.message.reply_text(f"üî¢ –ù–æ–º–µ—Ä –≤–∏–≥–ª—è–¥–∞—î —è–∫: {query}\n(–ü–æ—à—É–∫ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ ‚Äî –±—É–¥–µ –±—ñ–ª—å—à–µ)")
    else:
        # –ü–æ—à—É–∫ –ø–æ –Ω—ñ–∫—É
        username = query
        await update.message.reply_text(f"üîç –®—É–∫–∞—é –ø—Ä–æ—Ñ—ñ–ª—ñ –∑ –Ω—ñ–∫–Ω–µ–π–º–æ–º: {username}\n–¶–µ –∑–∞–π–º–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥...")

        url = f"https://www.namecheckr.com/namecheckr/?username={username}"

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    if resp.status == 200:
                        # –¢—É—Ç –º–æ–∂–Ω–∞ –ø–∞—Ä—Å–∏—Ç–∏ html resp.text(), –∞–ª–µ –ø–æ–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        await update.message.reply_text("‚úÖ –î–µ—è–∫—ñ —Å–∞–π—Ç–∏, –¥–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ü–µ–π –Ω—ñ–∫: (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ –±—É–¥–µ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∞ –≤–∏–¥–∞—á–∞)")
                    else:
                        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ.")
        except Exception as e:
            await update.message.reply_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É: {e}")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
