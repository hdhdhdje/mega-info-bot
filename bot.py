import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import re
import aiohttp

TOKEN = "–¢–£–¢_–¢–í–û–ô_–¢–û–ö–ï–ù"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –Ω—ñ–∫–Ω–µ–π–º –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É üîç")

def is_phone_number(text: str) -> bool:
    return re.match(r"^\+?[0-9]{7,15}$", text)

async def search_by_username(username: str) -> str:
    async with aiohttp.ClientSession() as session:
        url = f"https://www.namecheckr.com/namecheckr/?username={username}"
        async with session.get(url) as resp:
            if resp.status == 200:
                return f"‚úÖ –ú–æ–∂–ª–∏–≤–æ, —Ç–∞–∫–∏–π –Ω—ñ–∫ —ñ—Å–Ω—É—î. (–î–µ—Ç–∞–ª—ñ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)"
            else:
                return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é."

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()

    if is_phone_number(query):
        await update.message.reply_text(f"üî¢ –í–∏—è–≤–ª–µ–Ω–æ –Ω–æ–º–µ—Ä: {query}\n(–ü–æ—à—É–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚Äî –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)")
    else:
        await update.message.reply_text(f"üîç –®—É–∫–∞—é –ø—Ä–æ—Ñ—ñ–ª—ñ –∑ –Ω—ñ–∫–Ω–µ–π–º–æ–º: {query}")
        result = await search_by_username(query)
        await update.message.reply_text(result)

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
